malloc: dynamically allocates memory
(givesyou heap space)
memory is allocated at runtime... so... it might be parameterized and different per run
malloc is not guaranteed... sooo.. before you use the memory you ask for, make sure that you have it.
	>if fails, the pointer returned will be equal to NULL!
(cast type*)malloc(sizeof(type)*numberof)

free
always free malloced memory!
ways free() can go wrong
	1. double free
		...
		free(ptr);
		free(ptr);//dont free the same memory twice! be careful!
		
	2. freeing static memory
		int a;
		int *ptr = &a;
		free(ptr);
		
	3.non-reference free
		int a;
		free(a);

--


pointers to:
	built in types (int, double, char, etc etc)
	pointers
	user created types (structs, unions, enum, typedef)
	functions/instructions!!!

function pointers

int (*fnptr)() = somefunction; <---function pointer to <somefunction>
            ^^need to put argument types here! But do not need variable names, only types

"fnptr()" acts like "somefunction()"

*possible to cast function pointers
(int (*) ()) <---this is the cast to a function pointer that takes no parameters and returns an int

Example of use!
int typelessComparator(void *arg0, void *arg1, int (*compare)(void*, void*)) {
	
	int diff = compare(arg0, arg1);

	if(diff > 0) {
		theyre greater!
	} else if (diff = 0) {
		theyre equal
	} etc etc...
	
	return diff;
}

int charComparator(void* firstArg, void* secondArg) {
	char* arg0 = (char*)malloc(sizeof(char));
	char* arg1 = (char*)malloc(sizeof(char));

	if(*arg1 > *arg0) {
		return 1;
		
	} else if(*arg1 < *arg0) {
		return -1;
	}
	return 0;
}


int main ... {
	char *firstArg = (char*)malloc(sizeof(char));
	char *secondArg = (char*)malloc(sizeof(char));
	//NEED TO MALLOC TO PASS TO FUNCTION POINTERS
	
	if(firstArg == NILL || secondArg == NULL) {
		printf("ACK\n");
		return -1;
	}
	
	*firstArg = 'a';
	*secondArg = 'b';
	
	typelessComparator((void*)firstArg, (void*)secondArg, charComparator);
	
	return 0;


}


Bottom line: when you dont know exactly what function you are running until
after compile time, use a function pointer! gives you flexibility to give the
appropriate function whenever you are invoking an ambiguous function












